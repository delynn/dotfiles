{"mode":"editor","version":"0.75.0","windowDimensions":{"x":208,"y":22,"width":1024,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6","buffers":[{"text":"# This takes the preferrable methods and adds some\n# syntatic sugar to access the preferences\n#\n# class App < Configuration\n#   preference :color, :string\n# end\n#\n# a = App.new\n#\n# setters:\n# a.color = :blue\n# a[:color] = :blue\n# a.set :color = :blue\n# a.preferred_color = :blue\n#\n# getters:\n# a.color\n# a[:color]\n# a.get :color\n# a.preferred_color\n#\n#\nmodule Spree::Preferences\n  class Configuration\n    include Spree::Preferences::Preferable\n\n    def configure\n      yield(self) if block_given?\n    end\n\n    def preference_cache_key(name)\n      [rails_cache_id, self.class.name, name].compact.join('::').underscore\n    end\n\n    def rails_cache_id\n      ENV['RAILS_CACHE_ID']\n    end\n\n    def reset\n      preferences.each do |name, value|\n        set_preference name, preference_default(name)\n      end\n    end\n\n    alias :[] :get_preference\n    alias :[]= :set_preference\n\n    alias :get :get_preference\n\n    def set(*args)\n      options = args.extract_options!\n      options.each do |name, value|\n        set_preference name, value\n      end\n\n      if args.size == 2\n        set_preference args[0], args[1]\n      end\n    end\n\n    def method_missing(method, *args)\n      name = method.to_s.gsub('=', '')\n      if has_preference? name\n        if method.to_s =~ /=$/\n          set_preference(name, args.first)\n        else\n          get_preference name\n        end\n      else\n        super\n      end\n    end\n\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":12,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/models/spree/preferences/configuration.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a3dad61f93906eac9715676d21d77ddffee4cb42","deserializer":"TextBuffer"},{"text":"# This is the primary location for defining spree preferences\n#\n# The expectation is that this is created once and stored in\n# the spree environment\n#\n# setters:\n# a.color = :blue\n# a[:color] = :blue\n# a.set :color = :blue\n# a.preferred_color = :blue\n#\n# getters:\n# a.color\n# a[:color]\n# a.get :color\n# a.preferred_color\n#\nrequire \"spree/core/search/base\"\n\nmodule Spree\n  class AppConfiguration < Preferences::Configuration\n\n    # Alphabetized to more easily lookup particular preferences\n    preference :address_requires_state, :boolean, default: true # should state/state_name be required\n    preference :admin_interface_logo, :string, default: 'logo/spree_50.png'\n    preference :admin_products_per_page, :integer, default: 10\n    preference :allow_backorder_shipping, :boolean, default: false # should only be true if you don't need to track inventory\n    preference :allow_checkout_on_gateway_error, :boolean, default: false\n    preference :allow_guest_checkout, :boolean, default: true\n    preference :allow_ssl_in_development_and_test, :boolean, default: false\n    preference :allow_ssl_in_production, :boolean, default: true\n    preference :allow_ssl_in_staging, :boolean, default: true\n    preference :alternative_billing_phone, :boolean, default: false # Request extra phone for bill addr\n    preference :alternative_shipping_phone, :boolean, default: false # Request extra phone for ship addr\n    preference :always_include_confirm_step, :boolean, default: false # Ensures confirmation step is always in checkout_progress bar, but does not force a confirm step if your payment methods do not support it.\n    preference :always_put_site_name_in_title, :boolean, default: true\n    preference :auto_capture, :boolean, default: false # automatically capture the credit card (as opposed to just authorize and capture later)\n    preference :check_for_spree_alerts, :boolean, default: true\n    preference :checkout_zone, :string, default: nil # replace with the name of a zone if you would like to limit the countries\n    preference :company, :boolean, default: false # Request company field for billing and shipping addr\n    preference :currency, :string, default: \"USD\"\n    preference :currency_decimal_mark, :string, default: \".\"\n    preference :currency_symbol_position, :string, default: \"before\"\n    preference :currency_sign_before_symbol, :boolean, default: true\n    preference :currency_thousands_separator, :string, default: \",\"\n    preference :display_currency, :boolean, default: false\n    preference :default_country_id, :integer\n    preference :default_meta_description, :string, default: 'Spree demo site'\n    preference :default_meta_keywords, :string, default: 'spree, demo'\n    preference :default_seo_title, :string, default: ''\n    preference :dismissed_spree_alerts, :string, default: ''\n    preference :hide_cents, :boolean, default: false\n    preference :last_check_for_spree_alerts, :string, default: nil\n    preference :layout, :string, default: 'spree/layouts/spree_application'\n    preference :logo, :string, default: 'logo/spree_50.png'\n    preference :max_level_in_taxons_menu, :integer, default: 1 # maximum nesting level in taxons menu\n    preference :orders_per_page, :integer, default: 15\n    preference :prices_inc_tax, :boolean, default: false\n    preference :products_per_page, :integer, default: 12\n    preference :redirect_https_to_http, :boolean, :default => false\n    preference :require_master_price, :boolean, default: true\n    preference :shipment_inc_vat, :boolean, default: false\n    preference :shipping_instructions, :boolean, default: false # Request instructions/info for shipping\n    preference :show_only_complete_orders_by_default, :boolean, default: true\n    preference :show_variant_full_price, :boolean, default: false #Displays variant full price or difference with product price. Default false to be compatible with older behavior\n    preference :show_products_without_price, :boolean, default: false\n    preference :show_raw_product_description, :boolean, :default => false\n    preference :site_name, :string, default: 'Spree Demo Site'\n    preference :site_url, :string, default: 'demo.spreecommerce.com'\n    preference :tax_using_ship_address, :boolean, default: true\n    preference :track_inventory_levels, :boolean, default: true # Determines whether to track on_hand values for variants / products.\n\n    # Preferences related to image settings\n    preference :attachment_default_url, :string, default: '/spree/products/:id/:style/:basename.:extension'\n    preference :attachment_path, :string, default: ':rails_root/public/spree/products/:id/:style/:basename.:extension'\n    preference :attachment_url, :string, default: '/spree/products/:id/:style/:basename.:extension'\n    preference :attachment_styles, :string, default: \"{\\\"mini\\\":\\\"48x48>\\\",\\\"small\\\":\\\"100x100>\\\",\\\"product\\\":\\\"240x240>\\\",\\\"large\\\":\\\"600x600>\\\"}\"\n    preference :attachment_default_style, :string, default: 'product'\n    preference :s3_access_key, :string\n    preference :s3_bucket, :string\n    preference :s3_secret, :string\n    preference :s3_headers, :string, default: \"{\\\"Cache-Control\\\":\\\"max-age=31557600\\\"}\"\n    preference :use_s3, :boolean, default: false # Use S3 for images rather than the file system\n    preference :s3_protocol, :string\n    preference :s3_host_alias, :string\n\n    # Default mail headers settings\n    preference :enable_mail_delivery, :boolean, :default => false\n    preference :send_core_emails, :boolean, :default => true\n    preference :mails_from, :string, :default => 'spree@example.com'\n    preference :mail_bcc, :string, :default => 'spree@example.com'\n    preference :intercept_email, :string, :default => nil\n\n    # Default smtp settings\n    preference :override_actionmailer_config, :boolean, :default => true\n    preference :mail_host, :string, :default => 'localhost'\n    preference :mail_domain, :string, :default => 'localhost'\n    preference :mail_port, :integer, :default => 25\n    preference :secure_connection_type, :string, :default => Core::MailSettings::SECURE_CONNECTION_TYPES[0]\n    preference :mail_auth_type, :string, :default => Core::MailSettings::MAIL_AUTH[0]\n    preference :smtp_username, :string\n    preference :smtp_password, :string\n\n    # searcher_class allows spree extension writers to provide their own Search class\n    def searcher_class\n      @searcher_class ||= Spree::Core::Search::Base\n    end\n\n    def searcher_class=(sclass)\n      @searcher_class = sclass\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[99,53],[99,82]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":14,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/models/spree/app_configuration.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"f283a2c0ffac0da244e27b0c71f3428a02d1bc9f","deserializer":"TextBuffer"},{"text":"module Spree\n  module Core\n    class Engine < ::Rails::Engine\n      isolate_namespace Spree\n      engine_name 'spree'\n\n      config.autoload_paths += %W(#{config.root}/lib)\n\n      config.after_initialize do\n        ActiveSupport::Notifications.subscribe(/^spree\\./) do |*args|\n          event_name, start_time, end_time, id, payload = args\n          Activator.active.event_name_starts_with(event_name).each do |activator|\n            payload[:event_name] = event_name\n            activator.activate(payload)\n          end\n        end\n      end\n\n      initializer \"spree.environment\", :before => :load_config_initializers do |app|\n        app.config.spree = Spree::Core::Environment.new\n        Spree::Config = app.config.spree.preferences #legacy access\n      end\n\n      initializer \"spree.load_preferences\", :before => \"spree.environment\" do\n        ::ActiveRecord::Base.send :include, Spree::Preferences::Preferable\n      end\n\n      initializer \"spree.register.calculators\" do |app|\n        app.config.spree.calculators.shipping_methods = [\n            Spree::Calculator::Shipping::FlatPercentItemTotal,\n            Spree::Calculator::Shipping::FlatRate,\n            Spree::Calculator::Shipping::FlexiRate,\n            Spree::Calculator::Shipping::PerItem,\n            Spree::Calculator::Shipping::PriceSack]\n\n         app.config.spree.calculators.tax_rates = [\n            Spree::Calculator::DefaultTax]\n      end\n\n      initializer \"spree.register.stock_splitters\" do |app|\n        app.config.spree.stock_splitters = [\n          Spree::Stock::Splitter::ShippingCategory,\n          Spree::Stock::Splitter::Backordered\n        ]\n      end\n\n      initializer \"spree.register.payment_methods\" do |app|\n        app.config.spree.payment_methods = [\n            Spree::Gateway::Bogus,\n            Spree::Gateway::BogusSimple,\n            Spree::PaymentMethod::Check ]\n      end\n\n      initializer \"spree.mail.settings\" do |app|\n        ActionMailer::Base.add_delivery_method :spree, Spree::Core::MailMethod\n        Spree::Core::MailSettings.init\n        Mail.register_interceptor(Spree::Core::MailInterceptor)\n      end\n\n      # We need to define promotions rules here so extensions and existing apps\n      # can add their custom classes on their initializer files\n      initializer 'spree.promo.environment' do |app|\n        app.config.spree.add_class('promotions')\n        app.config.spree.promotions = Spree::Promo::Environment.new\n        app.config.spree.promotions.rules = []\n      end\n\n      initializer 'spree.promo.register.promotion.calculators' do |app|\n        app.config.spree.calculators.add_class('promotion_actions_create_adjustments')\n        app.config.spree.calculators.promotion_actions_create_adjustments = [\n          Spree::Calculator::FlatPercentItemTotal,\n          Spree::Calculator::FlatRate,\n          Spree::Calculator::FlexiRate,\n          Spree::Calculator::PerItem,\n          Spree::Calculator::PercentPerItem,\n          Spree::Calculator::FreeShipping\n        ]\n      end\n\n      # Promotion rules need to be evaluated on after initialize otherwise\n      # Spree.user_class would be nil and users might experience errors related\n      # to malformed model associations (Spree.user_class is only defined on\n      # the app initializer)\n      config.after_initialize do\n        Rails.application.config.spree.promotions.rules.concat [\n          Spree::Promotion::Rules::ItemTotal,\n          Spree::Promotion::Rules::Product,\n          Spree::Promotion::Rules::User,\n          Spree::Promotion::Rules::FirstOrder,\n          Spree::Promotion::Rules::UserLoggedIn]\n      end\n\n      initializer 'spree.promo.register.promotions.actions' do |app|\n        app.config.spree.promotions.actions = [Spree::Promotion::Actions::CreateAdjustment,\n          Spree::Promotion::Actions::CreateLineItems]\n      end\n\n      # filter sensitive information during logging\n      initializer \"spree.params.filter\" do |app|\n        app.config.filter_parameters += [\n          :password,\n          :password_confirmation,\n          :number,\n          :verification_value]\n      end\n\n      initializer \"spree.core.checking_migrations\" do |app|\n        Migrations.new(config, engine_name).check\n      end\n    end\n  end\nend\n\nrequire 'spree/core/routes'\n","markers":{"markers":{"1":{"id":1,"range":[[54,22],[54,26]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":28,"autoscroll":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/lib/spree/core/engine.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4be8388a7358055a41b71888ee0f127058959018","deserializer":"TextBuffer"},{"text":"module Spree\n  class BaseMailer < ActionMailer::Base\n    def from_address\n      Spree::Config[:mails_from]\n    end\n\n    def money(amount)\n      Spree::Money.new(amount).to_s\n    end\n    helper_method :money\n\n    def mail(headers={}, &block)\n      super if Spree::Config[:send_core_emails]\n    end\n\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":30},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/mailers/spree/base_mailer.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a3063415b5bd45466b22a0ce472dd7ea3c968aae","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":12,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":13,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/models/spree/preferences/configuration.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":14,"softTabs":true,"scrollTop":909,"scrollLeft":62,"displayBuffer":{"id":15,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/models/spree/app_configuration.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":28,"softTabs":true,"scrollTop":472,"scrollLeft":0,"displayBuffer":{"id":29,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/lib/spree/core/engine.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":30,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":31,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/mailers/spree/base_mailer.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/models/spree/app_configuration.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"project-find:show":{"count":1,"name":"project-find:show","lastRun":1396215616760}}},"fuzzy-finder":{"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/models/spree/preferences/configuration.rb":1396215575360,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/models/spree/app_configuration.rb":1396218774275,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/lib/spree/core/engine.rb":1396218771812,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app/mailers/spree/base_mailer.rb":1396216026280},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":3752536},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_core-2.1.6/app","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"projectViewState":{"findHistory":["override_actionmailer_config","ActionMailer::Base"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}}}}