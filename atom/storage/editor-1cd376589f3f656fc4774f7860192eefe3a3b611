{"mode":"editor","version":"0.75.0","windowDimensions":{"x":208,"y":22,"width":1024,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4","buffers":[{"text":"require 'rails'\nrequire 'active_support/core_ext/numeric/time'\nrequire 'active_support/dependencies'\nrequire 'orm_adapter'\nrequire 'set'\nrequire 'securerandom'\n\nmodule Devise\n  autoload :Delegator,          'devise/delegator'\n  autoload :FailureApp,         'devise/failure_app'\n  autoload :OmniAuth,           'devise/omniauth'\n  autoload :ParameterFilter,    'devise/parameter_filter'\n  autoload :BaseSanitizer,      'devise/parameter_sanitizer'\n  autoload :ParameterSanitizer, 'devise/parameter_sanitizer'\n  autoload :TestHelpers,        'devise/test_helpers'\n  autoload :TimeInflector,      'devise/time_inflector'\n\n  module Controllers\n    autoload :Helpers, 'devise/controllers/helpers'\n    autoload :Rememberable, 'devise/controllers/rememberable'\n    autoload :ScopedViews, 'devise/controllers/scoped_views'\n    autoload :UrlHelpers, 'devise/controllers/url_helpers'\n  end\n\n  module Mailers\n    autoload :Helpers, 'devise/mailers/helpers'\n  end\n\n  module Strategies\n    autoload :Base, 'devise/strategies/base'\n    autoload :Authenticatable, 'devise/strategies/authenticatable'\n  end\n\n  # Constants which holds devise configuration for extensions. Those should\n  # not be modified by the \"end user\" (this is why they are constants).\n  ALL         = []\n  CONTROLLERS = ActiveSupport::OrderedHash.new\n  ROUTES      = ActiveSupport::OrderedHash.new\n  STRATEGIES  = ActiveSupport::OrderedHash.new\n  URL_HELPERS = ActiveSupport::OrderedHash.new\n\n  # Strategies that do not require user input.\n  NO_INPUT = []\n\n  # True values used to check params\n  TRUE_VALUES = [true, 1, '1', 't', 'T', 'true', 'TRUE']\n\n  # Custom domain or key for cookies. Not set by default\n  mattr_accessor :rememberable_options\n  @@rememberable_options = {}\n\n  # The number of times to encrypt password.\n  mattr_accessor :stretches\n  @@stretches = 10\n\n  # The default key used when authenticating over http auth.\n  mattr_accessor :http_authentication_key\n  @@http_authentication_key = nil\n\n  # Keys used when authenticating a user.\n  mattr_accessor :authentication_keys\n  @@authentication_keys = [ :email ]\n\n  # Request keys used when authenticating a user.\n  mattr_accessor :request_keys\n  @@request_keys = []\n\n  # Keys that should be case-insensitive.\n  mattr_accessor :case_insensitive_keys\n  @@case_insensitive_keys = [ :email ]\n\n  # Keys that should have whitespace stripped.\n  mattr_accessor :strip_whitespace_keys\n  @@strip_whitespace_keys = []\n\n  # If http authentication is enabled by default.\n  mattr_accessor :http_authenticatable\n  @@http_authenticatable = false\n\n  # If http headers should be returned for ajax requests. True by default.\n  mattr_accessor :http_authenticatable_on_xhr\n  @@http_authenticatable_on_xhr = true\n\n  # If params authenticatable is enabled by default.\n  mattr_accessor :params_authenticatable\n  @@params_authenticatable = true\n\n  # The realm used in Http Basic Authentication.\n  mattr_accessor :http_authentication_realm\n  @@http_authentication_realm = \"Application\"\n\n  # Email regex used to validate email formats. It simply asserts that\n  # an one (and only one) @ exists in the given string. This is mainly\n  # to give user feedback and not to assert the e-mail validity.\n  mattr_accessor :email_regexp\n  @@email_regexp = /\\A[^@\\s]+@([^@\\s]+\\.)+[^@\\s]+\\z/\n\n  # Range validation for password length\n  mattr_accessor :password_length\n  @@password_length = 6..128\n\n  # The time the user will be remembered without asking for credentials again.\n  mattr_accessor :remember_for\n  @@remember_for = 2.weeks\n\n  # If true, extends the user's remember period when remembered via cookie.\n  mattr_accessor :extend_remember_period\n  @@extend_remember_period = false\n\n  # Time interval you can access your account before confirming your account.\n  # nil - allows unconfirmed access for unlimited time\n  mattr_accessor :allow_unconfirmed_access_for\n  @@allow_unconfirmed_access_for = 0.days\n\n  # Time interval the confirmation token is valid. nil = unlimited\n  mattr_accessor :confirm_within\n  @@confirm_within = nil\n\n  # Defines which key will be used when confirming an account.\n  mattr_accessor :confirmation_keys\n  @@confirmation_keys = [ :email ]\n\n  # Defines if email should be reconfirmable.\n  # False by default for backwards compatibility.\n  mattr_accessor :reconfirmable\n  @@reconfirmable = false\n\n  # Time interval to timeout the user session without activity.\n  mattr_accessor :timeout_in\n  @@timeout_in = 30.minutes\n\n  # Authentication token expiration on timeout\n  mattr_accessor :expire_auth_token_on_timeout\n  @@expire_auth_token_on_timeout = false\n\n  # Used to encrypt password. Please generate one with rake secret.\n  mattr_accessor :pepper\n  @@pepper = nil\n\n  # Scoped views. Since it relies on fallbacks to render default views, it's\n  # turned off by default.\n  mattr_accessor :scoped_views\n  @@scoped_views = false\n\n  # Defines which strategy can be used to lock an account.\n  # Values: :failed_attempts, :none\n  mattr_accessor :lock_strategy\n  @@lock_strategy = :failed_attempts\n\n  # Defines which key will be used when locking and unlocking an account\n  mattr_accessor :unlock_keys\n  @@unlock_keys = [ :email ]\n\n  # Defines which strategy can be used to unlock an account.\n  # Values: :email, :time, :both\n  mattr_accessor :unlock_strategy\n  @@unlock_strategy = :both\n\n  # Number of authentication tries before locking an account\n  mattr_accessor :maximum_attempts\n  @@maximum_attempts = 20\n\n  # Time interval to unlock the account if :time is defined as unlock_strategy.\n  mattr_accessor :unlock_in\n  @@unlock_in = 1.hour\n\n  # Defines which key will be used when recovering the password for an account\n  mattr_accessor :reset_password_keys\n  @@reset_password_keys = [ :email ]\n\n  # Time interval you can reset your password with a reset password key\n  mattr_accessor :reset_password_within\n  @@reset_password_within = 6.hours\n\n  # The default scope which is used by warden.\n  mattr_accessor :default_scope\n  @@default_scope = nil\n\n  # Address which sends Devise e-mails.\n  mattr_accessor :mailer_sender\n  @@mailer_sender = nil\n\n  # Authentication token params key name of choice. E.g. /users/sign_in?some_key=...\n  mattr_accessor :token_authentication_key\n  @@token_authentication_key = :auth_token\n\n  # Skip session storage for the following strategies\n  mattr_accessor :skip_session_storage\n  @@skip_session_storage = []\n\n  # Which formats should be treated as navigational.\n  mattr_accessor :navigational_formats\n  @@navigational_formats = [\"*/*\", :html]\n\n  # When set to true, signing out a user signs out all other scopes.\n  mattr_accessor :sign_out_all_scopes\n  @@sign_out_all_scopes = true\n\n  # The default method used while signing out\n  mattr_accessor :sign_out_via\n  @@sign_out_via = :get\n\n  # The parent controller all Devise controllers inherits from.\n  # Defaults to ApplicationController. This should be set early\n  # in the initialization process and should be set to a string.\n  mattr_accessor :parent_controller\n  @@parent_controller = \"ApplicationController\"\n\n  # The parent mailer all Devise mailers inherit from.\n  # Defaults to ActionMailer::Base. This should be set early\n  # in the initialization process and should be set to a string.\n  mattr_accessor :parent_mailer\n  @@parent_mailer = \"ActionMailer::Base\"\n\n  # The router Devise should use to generate routes. Defaults\n  # to :main_app. Should be overriden by engines in order\n  # to provide custom routes.\n  mattr_accessor :router_name\n  @@router_name = nil\n\n  # Set the omniauth path prefix so it can be overriden when\n  # Devise is used in a mountable engine\n  mattr_accessor :omniauth_path_prefix\n  @@omniauth_path_prefix = nil\n\n  # Set if we should clean up the CSRF Token on authentication\n  mattr_accessor :clean_up_csrf_token_on_authentication\n  @@clean_up_csrf_token_on_authentication = true\n\n  def self.encryptor=(value)\n    warn \"\\n[DEVISE] To select a encryption which isn't bcrypt, you should use devise-encryptable gem.\\n\"\n  end\n\n  def self.use_salt_as_remember_token=(value)\n    warn \"\\n[DEVISE] Devise.use_salt_as_remember_token is deprecated and has no effect. Please remove it.\\n\"\n  end\n\n  def self.apply_schema=(value)\n    warn \"\\n[DEVISE] Devise.apply_schema is deprecated and has no effect. Please remove it.\\n\"\n  end\n\n  # PRIVATE CONFIGURATION\n\n  # Store scopes mappings.\n  mattr_reader :mappings\n  @@mappings = ActiveSupport::OrderedHash.new\n\n  # Omniauth configurations.\n  mattr_reader :omniauth_configs\n  @@omniauth_configs = ActiveSupport::OrderedHash.new\n\n  # Define a set of modules that are called when a mapping is added.\n  mattr_reader :helpers\n  @@helpers = Set.new\n  @@helpers << Devise::Controllers::Helpers\n\n  # Private methods to interface with Warden.\n  mattr_accessor :warden_config\n  @@warden_config = nil\n  @@warden_config_block = nil\n\n  # When true, enter in paranoid mode to avoid user enumeration.\n  mattr_accessor :paranoid\n  @@paranoid = false\n\n  # Default way to setup Devise. Run rails generate devise_install to create\n  # a fresh initializer with all configuration values.\n  def self.setup\n    yield self\n  end\n\n  class Getter\n    def initialize name\n      @name = name\n    end\n\n    def get\n      ActiveSupport::Dependencies.constantize(@name)\n    end\n  end\n\n  def self.ref(arg)\n    if defined?(ActiveSupport::Dependencies::ClassCache)\n      ActiveSupport::Dependencies::reference(arg)\n      Getter.new(arg)\n    else\n      ActiveSupport::Dependencies.ref(arg)\n    end\n  end\n\n  def self.available_router_name\n    router_name || :main_app\n  end\n\n  def self.omniauth_providers\n    omniauth_configs.keys\n  end\n\n  # Get the mailer class from the mailer reference object.\n  def self.mailer\n    @@mailer_ref.get\n  end\n\n  # Set the mailer reference object to access the mailer.\n  def self.mailer=(class_name)\n    @@mailer_ref = ref(class_name)\n  end\n  self.mailer = \"Devise::Mailer\"\n\n  # Small method that adds a mapping to Devise.\n  def self.add_mapping(resource, options)\n    mapping = Devise::Mapping.new(resource, options)\n    @@mappings[mapping.name] = mapping\n    @@default_scope ||= mapping.name\n    @@helpers.each { |h| h.define_helpers(mapping) }\n    mapping\n  end\n\n  # Make Devise aware of an 3rd party Devise-module (like invitable). For convenience.\n  #\n  # == Options:\n  #\n  #   +model+      - String representing the load path to a custom *model* for this module (to autoload.)\n  #   +controller+ - Symbol representing the name of an existing or custom *controller* for this module.\n  #   +route+      - Symbol representing the named *route* helper for this module.\n  #   +strategy+   - Symbol representing if this module got a custom *strategy*.\n  #\n  # All values, except :model, accept also a boolean and will have the same name as the given module\n  # name.\n  #\n  # == Examples:\n  #\n  #   Devise.add_module(:party_module)\n  #   Devise.add_module(:party_module, :strategy => true, :controller => :sessions)\n  #   Devise.add_module(:party_module, :model => 'party_module/model')\n  #\n  def self.add_module(module_name, options = {})\n    ALL << module_name\n    options.assert_valid_keys(:strategy, :model, :controller, :route, :no_input)\n\n    if strategy = options[:strategy]\n      strategy = (strategy == true ? module_name : strategy)\n      STRATEGIES[module_name] = strategy\n    end\n\n    if controller = options[:controller]\n      controller = (controller == true ? module_name : controller)\n      CONTROLLERS[module_name] = controller\n    end\n\n    NO_INPUT << strategy if options[:no_input]\n\n    if route = options[:route]\n      case route\n      when TrueClass\n        key, value = module_name, []\n      when Symbol\n        key, value = route, []\n      when Hash\n        key, value = route.keys.first, route.values.flatten\n      else\n        raise ArgumentError, \":route should be true, a Symbol or a Hash\"\n      end\n\n      URL_HELPERS[key] ||= []\n      URL_HELPERS[key].concat(value)\n      URL_HELPERS[key].uniq!\n\n      ROUTES[module_name] = key\n    end\n\n    if options[:model]\n      path = (options[:model] == true ? \"devise/models/#{module_name}\" : options[:model])\n      camelized = ActiveSupport::Inflector.camelize(module_name.to_s)\n      Devise::Models.send(:autoload, camelized.to_sym, path)\n    end\n\n    Devise::Mapping.add_module module_name\n  end\n\n  # Sets warden configuration using a block that will be invoked on warden\n  # initialization.\n  #\n  #  Devise.initialize do |config|\n  #    config.allow_unconfirmed_access_for = 2.days\n  #\n  #    config.warden do |manager|\n  #      # Configure warden to use other strategies, like oauth.\n  #      manager.oauth(:twitter)\n  #    end\n  #  end\n  def self.warden(&block)\n    @@warden_config_block = block\n  end\n\n  # Specify an omniauth provider.\n  #\n  #   config.omniauth :github, APP_ID, APP_SECRET\n  #\n  def self.omniauth(provider, *args)\n    @@helpers << Devise::OmniAuth::UrlHelpers\n    config = Devise::OmniAuth::Config.new(provider, args)\n    @@omniauth_configs[config.strategy_name.to_sym] = config\n  end\n\n  # Include helpers in the given scope to AC and AV.\n  def self.include_helpers(scope)\n    ActiveSupport.on_load(:action_controller) do\n      include scope::Helpers if defined?(scope::Helpers)\n      include scope::UrlHelpers\n    end\n\n    ActiveSupport.on_load(:action_view) do\n      include scope::UrlHelpers\n    end\n  end\n\n  # Regenerates url helpers considering Devise.mapping\n  def self.regenerate_helpers!\n    Devise::Controllers::UrlHelpers.remove_helpers!\n    Devise::Controllers::UrlHelpers.generate_helpers!\n  end\n\n  # A method used internally to setup warden manager from the Rails initialize\n  # block.\n  def self.configure_warden! #:nodoc:\n    @@warden_configured ||= begin\n      warden_config.failure_app   = Devise::Delegator.new\n      warden_config.default_scope = Devise.default_scope\n      warden_config.intercept_401 = false\n\n      Devise.mappings.each_value do |mapping|\n        warden_config.scope_defaults mapping.name, :strategies => mapping.strategies\n\n        warden_config.serialize_into_session(mapping.name) do |record|\n          mapping.to.serialize_into_session(record)\n        end\n\n        warden_config.serialize_from_session(mapping.name) do |key|\n          # Previous versions contained an additional entry at the beginning of\n          # key with the record's class name.\n          args = key[-2, 2]\n          mapping.to.serialize_from_session(*args)\n        end\n      end\n\n      @@warden_config_block.try :call, Devise.warden_config\n      true\n    end\n  end\n\n  # Generate a friendly string randomly to be used as token.\n  def self.friendly_token\n    SecureRandom.base64(15).tr('+/=lIO0', 'pqrsxyz')\n  end\n\n  # constant-time comparison algorithm to prevent timing attacks\n  def self.secure_compare(a, b)\n    return false if a.blank? || b.blank? || a.bytesize != b.bytesize\n    l = a.unpack \"C#{a.bytesize}\"\n\n    res = 0\n    b.each_byte { |byte| res |= byte ^ l.shift }\n    res == 0\n  end\nend\n\nrequire 'warden'\nrequire 'devise/mapping'\nrequire 'devise/models'\nrequire 'devise/modules'\nrequire 'devise/rails'\n","markers":{"markers":{"1":{"id":1,"range":[[211,31],[211,31]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":94,"autoscroll":true,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/lib/devise.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"a109b35ab715bef3c9a7de640bbf05987bb23a1f","deserializer":"TextBuffer"},{"text":"# Use this hook to configure devise mailer, warden hooks and so forth.\n# Many of these configuration options can be set straight in your model.\nDevise.setup do |config|\n  # ==> Mailer Configuration\n  # Configure the e-mail address which will be shown in Devise::Mailer,\n  # note that it will be overwritten if you use your own mailer class with default \"from\" parameter.\n  config.mailer_sender = \"please-change-me-at-config-initializers-devise@example.com\"\n\n  # Configure the class responsible to send e-mails.\n  # config.mailer = \"Devise::Mailer\"\n\n  # ==> ORM configuration\n  # Load and configure the ORM. Supports :active_record (default) and\n  # :mongoid (bson_ext recommended) by default. Other ORMs may be\n  # available as additional gems.\n  require 'devise/orm/<%= options[:orm] %>'\n\n  # ==> Configuration for any authentication mechanism\n  # Configure which keys are used when authenticating a user. The default is\n  # just :email. You can configure it to use [:username, :subdomain], so for\n  # authenticating a user, both parameters are required. Remember that those\n  # parameters are used only when authenticating and not when retrieving from\n  # session. If you need permissions, you should implement that in a before filter.\n  # You can also supply a hash where the value is a boolean determining whether\n  # or not authentication should be aborted when the value is not present.\n  # config.authentication_keys = [ :email ]\n\n  # Configure parameters from the request object used for authentication. Each entry\n  # given should be a request method and it will automatically be passed to the\n  # find_for_authentication method and considered in your model lookup. For instance,\n  # if you set :request_keys to [:subdomain], :subdomain will be used on authentication.\n  # The same considerations mentioned for authentication_keys also apply to request_keys.\n  # config.request_keys = []\n\n  # Configure which authentication keys should be case-insensitive.\n  # These keys will be downcased upon creating or modifying a user and when used\n  # to authenticate or find a user. Default is :email.\n  config.case_insensitive_keys = [ :email ]\n\n  # Configure which authentication keys should have whitespace stripped.\n  # These keys will have whitespace before and after removed upon creating or\n  # modifying a user and when used to authenticate or find a user. Default is :email.\n  config.strip_whitespace_keys = [ :email ]\n\n  # Tell if authentication through request.params is enabled. True by default.\n  # It can be set to an array that will enable params authentication only for the\n  # given strategies, for example, `config.params_authenticatable = [:database]` will\n  # enable it only for database (email + password) authentication.\n  # config.params_authenticatable = true\n\n  # Tell if authentication through HTTP Auth is enabled. False by default.\n  # It can be set to an array that will enable http authentication only for the\n  # given strategies, for example, `config.http_authenticatable = [:token]` will\n  # enable it only for token authentication. The supported strategies are:\n  # :database      = Support basic authentication with authentication key + password\n  # :token         = Support basic authentication with token authentication key\n  # :token_options = Support token authentication with options as defined in\n  #                  http://api.rubyonrails.org/classes/ActionController/HttpAuthentication/Token.html\n  # config.http_authenticatable = false\n\n  # If http headers should be returned for AJAX requests. True by default.\n  # config.http_authenticatable_on_xhr = true\n\n  # The realm used in Http Basic Authentication. \"Application\" by default.\n  # config.http_authentication_realm = \"Application\"\n\n  # It will change confirmation, password recovery and other workflows\n  # to behave the same regardless if the e-mail provided was right or wrong.\n  # Does not affect registerable.\n  # config.paranoid = true\n\n  # By default Devise will store the user in session. You can skip storage for\n  # :http_auth and :token_auth by adding those symbols to the array below.\n  # Notice that if you are skipping storage for all authentication paths, you\n  # may want to disable generating routes to Devise's sessions controller by\n  # passing :skip => :sessions to `devise_for` in your config/routes.rb\n  config.skip_session_storage = [:http_auth]\n\n  # By default, Devise cleans up the CSRF token on authentication to\n  # avoid CSRF token fixation attacks. This means that, when using AJAX\n  # requests for sign in and sign up, you need to get a new CSRF token\n  # from the server. You can disable this option at your own risk.\n  # config.clean_up_csrf_token_on_authentication = true\n\n  # ==> Configuration for :database_authenticatable\n  # For bcrypt, this is the cost for hashing the password and defaults to 10. If\n  # using other encryptors, it sets how many times you want the password re-encrypted.\n  #\n  # Limiting the stretches to just one in testing will increase the performance of\n  # your test suite dramatically. However, it is STRONGLY RECOMMENDED to not use\n  # a value less than 10 in other environments.\n  config.stretches = Rails.env.test? ? 1 : 10\n\n  # Setup a pepper to generate the encrypted password.\n  # config.pepper = <%= SecureRandom.hex(64).inspect %>\n\n  # ==> Configuration for :confirmable\n  # A period that the user is allowed to access the website even without\n  # confirming his account. For instance, if set to 2.days, the user will be\n  # able to access the website for two days without confirming his account,\n  # access will be blocked just in the third day. Default is 0.days, meaning\n  # the user cannot access the website without confirming his account.\n  # config.allow_unconfirmed_access_for = 2.days\n\n  # A period that the user is allowed to confirm their account before their\n  # token becomes invalid. For example, if set to 3.days, the user can confirm\n  # their account within 3 days after the mail was sent, but on the fourth day\n  # their account can't be confirmed with the token any more.\n  # Default is nil, meaning there is no restriction on how long a user can take\n  # before confirming their account.\n  # config.confirm_within = 3.days\n\n  # If true, requires any email changes to be confirmed (exactly the same way as\n  # initial account confirmation) to be applied. Requires additional unconfirmed_email\n  # db field (see migrations). Until confirmed new email is stored in\n  # unconfirmed email column, and copied to email column on successful confirmation.\n  config.reconfirmable = true\n\n  # Defines which key will be used when confirming an account\n  # config.confirmation_keys = [ :email ]\n\n  # ==> Configuration for :rememberable\n  # The time the user will be remembered without asking for credentials again.\n  # config.remember_for = 2.weeks\n\n  # If true, extends the user's remember period when remembered via cookie.\n  # config.extend_remember_period = false\n\n  # Options to be passed to the created cookie. For instance, you can set\n  # :secure => true in order to force SSL only cookies.\n  # config.rememberable_options = {}\n\n  # ==> Configuration for :validatable\n  # Range for password length. Default is 8..128.\n  config.password_length = 8..128\n\n  # Email regex used to validate email formats. It simply asserts that\n  # one (and only one) @ exists in the given string. This is mainly\n  # to give user feedback and not to assert the e-mail validity.\n  # config.email_regexp = /\\A[^@]+@[^@]+\\z/\n\n  # ==> Configuration for :timeoutable\n  # The time you want to timeout the user session without activity. After this\n  # time the user will be asked for credentials again. Default is 30 minutes.\n  # config.timeout_in = 30.minutes\n\n  # If true, expires auth token on session timeout.\n  # config.expire_auth_token_on_timeout = false\n\n  # ==> Configuration for :lockable\n  # Defines which strategy will be used to lock an account.\n  # :failed_attempts = Locks an account after a number of failed attempts to sign in.\n  # :none            = No lock strategy. You should handle locking by yourself.\n  # config.lock_strategy = :failed_attempts\n\n  # Defines which key will be used when locking and unlocking an account\n  # config.unlock_keys = [ :email ]\n\n  # Defines which strategy will be used to unlock an account.\n  # :email = Sends an unlock link to the user email\n  # :time  = Re-enables login after a certain amount of time (see :unlock_in below)\n  # :both  = Enables both strategies\n  # :none  = No unlock strategy. You should handle unlocking by yourself.\n  # config.unlock_strategy = :both\n\n  # Number of authentication tries before locking an account if lock_strategy\n  # is failed attempts.\n  # config.maximum_attempts = 20\n\n  # Time interval to unlock the account if :time is enabled as unlock_strategy.\n  # config.unlock_in = 1.hour\n\n  # ==> Configuration for :recoverable\n  #\n  # Defines which key will be used when recovering the password for an account\n  # config.reset_password_keys = [ :email ]\n\n  # Time interval you can reset your password with a reset password key.\n  # Don't put a too small interval or your users won't have the time to\n  # change their passwords.\n  config.reset_password_within = 6.hours\n\n  # ==> Configuration for :encryptable\n  # Allow you to use another encryption algorithm besides bcrypt (default). You can use\n  # :sha1, :sha512 or encryptors from others authentication tools as :clearance_sha1,\n  # :authlogic_sha512 (then you should set stretches above to 20 for default behavior)\n  # and :restful_authentication_sha1 (then you should set stretches to 10, and copy\n  # REST_AUTH_SITE_KEY to pepper).\n  #\n  # Require the `devise-encryptable` gem when using anything other than bcrypt\n  # config.encryptor = :sha512\n\n  # ==> Configuration for :token_authenticatable\n  # Defines name of the authentication token params key\n  # config.token_authentication_key = :auth_token\n\n  # ==> Scopes configuration\n  # Turn scoped views on. Before rendering \"sessions/new\", it will first check for\n  # \"users/sessions/new\". It's turned off by default because it's slower if you\n  # are using only default views.\n  # config.scoped_views = false\n\n  # Configure the default scope given to Warden. By default it's the first\n  # devise role declared in your routes (usually :user).\n  # config.default_scope = :user\n\n  # Set this configuration to false if you want /users/sign_out to sign out\n  # only the current scope. By default, Devise signs out all scopes.\n  # config.sign_out_all_scopes = true\n\n  # ==> Navigation configuration\n  # Lists the formats that should be treated as navigational. Formats like\n  # :html, should redirect to the sign in page when the user does not have\n  # access, but formats like :xml or :json, should return 401.\n  #\n  # If you have any extra navigational formats, like :iphone or :mobile, you\n  # should add them to the navigational formats lists.\n  #\n  # The \"*/*\" below is required to match Internet Explorer requests.\n  # config.navigational_formats = [\"*/*\", :html]\n\n  # The default HTTP method used to sign out a resource. Default is :delete.\n  config.sign_out_via = :delete\n\n  # ==> OmniAuth\n  # Add a new OmniAuth provider. Check the wiki for more information on setting\n  # up on your models and hooks.\n  # config.omniauth :github, 'APP_ID', 'APP_SECRET', :scope => 'user,public_repo'\n\n  # ==> Warden configuration\n  # If you want to use other strategies, that are not supported by Devise, or\n  # change the failure app, you can configure them inside the config.warden block.\n  #\n  # config.warden do |manager|\n  #   manager.intercept_401 = false\n  #   manager.default_strategies(:scope => :user).unshift :some_external_strategy\n  # end\n\n  # ==> Mountable engine configurations\n  # When using Devise inside an engine, let's call it `MyEngine`, and this engine\n  # is mountable, there are some extra configurations to be taken into account.\n  # The following options are available, assuming the engine is mounted as:\n  #\n  #     mount MyEngine, at: \"/my_engine\"\n  #\n  # The router that invoked `devise_for`, in the example above, would be:\n  # config.router_name = :my_engine\n  #\n  # When using omniauth, Devise cannot automatically set Omniauth path,\n  # so you need to do it manually. For the users scope, it would be:\n  # config.omniauth_path_prefix = \"/my_engine/users/auth\"\nend\n","markers":{"markers":{"1":{"id":1,"range":[[123,23],[123,23]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":96,"autoscroll":true,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/lib/generators/templates/devise.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"e8bf02eec98b9e81b737563abc648cd3a7183808","deserializer":"TextBuffer"},{"text":"class Devise::Mailer < Devise.parent_mailer.constantize\n  include Devise::Mailers::Helpers\n\n  def confirmation_instructions(record, opts={})\n    devise_mail(record, :confirmation_instructions, opts)\n  end\n\n  def reset_password_instructions(record, opts={})\n    devise_mail(record, :reset_password_instructions, opts)\n  end\n\n  def unlock_instructions(record, opts={})\n    devise_mail(record, :unlock_instructions, opts)\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":102,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/app/mailers/devise/mailer.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"d64650999b5d1354b2365f3a64ed4feeb5e7ac90","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":94,"softTabs":true,"scrollTop":3038,"scrollLeft":0,"displayBuffer":{"id":95,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/lib/devise.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":96,"softTabs":true,"scrollTop":1630,"scrollLeft":0,"displayBuffer":{"id":97,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/lib/generators/templates/devise.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":102,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":103,"softWrap":false,"editorWidthInChars":98,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/app/mailers/devise/mailer.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/app/mailers/devise/mailer.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"project-find:show":{"count":4,"name":"project-find:show","lastRun":1396621851887}}},"find-and-replace":{"viewState":{"findHistory":["remember_for","parent_mailer"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["send_reset_password_instructions","authenticated","def authenticated","parent_mailer","def current_user"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/lib/devise.rb":1396216254632,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/lib/generators/templates/devise.rb":1396216526981,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/app/mailers/devise/mailer.rb":1396621856793},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":10579},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/devise-3.0.4/app","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}