{"mode":"editor","version":"0.75.0","windowDimensions":{"x":208,"y":22,"width":1024,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4","buffers":[{"text":"<% content_for :page_title do %>\n  <%= Spree.t(:option_types) %>\n<% end %>\n\n<% content_for :page_actions do %>\n  <li id=\"new_ot_link\">\n    <%= button_link_to Spree.t(:new_option_type), new_admin_option_type_url, { :remote => true, :icon => 'icon-plus', :id => 'new_option_type_link' } %>\n  </li>\n<% end %>\n\n<%= render :partial => 'spree/admin/shared/product_sub_menu' %>\n\n<div id=\"new_option_type\"></div>\n\n<% if @option_types.any? %>\n<table class=\"index sortable\" id=\"listing_option_types\" data-hook data-sortable-link=\"<%= update_positions_admin_option_types_url %>\">\n  <colgroup>\n    <col style=\"width: 10%\">\n    <col style=\"width: 35%\">\n    <col style=\"width: 40%\">\n    <col style=\"width: 15%\">\n  </colgroup>\n  <thead>\n    <tr data-hook=\"option_header\">\n      <th class=\"no-border\"></th>\n      <th><%= Spree.t(:name) %></th>\n      <th><%= Spree.t(:presentation) %></th>\n      <th class=\"actions\"></th>\n    </tr>\n  </thead>\n  <tbody>\n    <% @option_types.each do |option_type| %>\n      <tr class=\"spree_option_type <%= cycle('odd', 'even')%>\" id=\"<%= spree_dom_id option_type %>\" data-hook=\"option_row\">\n        <td class=\"no-border\"><span class=\"handle\"></span></td>\n        <td class=\"align-center\"><%= option_type.name %></td>\n        <td class=\"align-center presentation\"><%= option_type.presentation %></td>\n        <td class=\"actions\">\n          <%= link_to_edit(option_type, :class => 'admin_edit_option_type', :no_text => true) %>\n          <%= link_to_delete(option_type, :no_text => true) %>\n        </td>\n      </tr>\n    <% end %>\n  </tbody>\n</table>\n<% else %>\n  <div class=\"alpha twelve columns no-objects-found\">\n    <%= Spree.t(:no_resource_found, resource: I18n.t(:other, scope: 'activerecord.models.spree/option_type')) %>,\n    <%= link_to Spree.t(:add_one), spree.new_admin_option_type_path %>!\n  </div>\n<% end %>\n","markers":{"markers":{"1":{"id":1,"range":[[37,10],[37,96]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":29,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/index.html.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6d9f7334d685faf11e528ce2c13c1d485a615a5f","deserializer":"TextBuffer"},{"text":"<%= render :partial => 'spree/admin/shared/product_sub_menu' %>\n\n<% content_for :page_title do %>\n  <%= Spree.t(:editing_option_type) %> <span class=\"green\">\"<%= @option_type.name %>\"</span>\n<% end %>\n\n<% content_for :page_actions do %>\n  <li>\n    <span id=\"new_add_option_value\" data-hook>\n      <%= link_to_add_fields Spree.t(:add_option_value), \"tbody#option_values\", :class => 'button icon-plus' %>\n    </span>      \n  </li>\n  <li>\n    <%= button_link_to Spree.t(:back_to_option_types_list), spree.admin_option_types_path, :icon => 'icon-arrow-left' %>\n  </li>\n<% end %>\n\n<%= render :partial => 'spree/shared/error_messages', :locals => { :target => @option_type } %>\n\n<%= form_for [:admin, @option_type] do |f| %>\n  <fieldset>\n    <legend align=\"center\"><%= Spree.t(:option_values) %></legend>\n    \n    <%= render :partial => 'form', :locals => { :f => f } %>\n\n    <table class=\"index sortable\" data-hook data-sortable-link=\"<%= update_values_positions_admin_option_types_url %>\">\n      <thead data-hook=\"option_header\">\n        <tr>\n          <th colspan=\"2\"><%= Spree.t(:name) %></th>\n          <th><%= Spree.t(:display) %></th>\n          <th class=\"actions\"></th>\n        </tr>\n      </thead>\n      <tbody id=\"option_values\">\n        <% if @option_type.option_values.empty? %>\n          <tr id=\"none\" data-hook=\"option_none\" class=\"<%= cycle('odd', 'even')%>\">\n            <td colspan=\"2\"><%= Spree.t(:none) %></td>\n            <td class=\"actions\"></td>\n          </tr>\n        <% else %>\n          <%= f.fields_for :option_values do |option_value_form| %>\n            <%= render :partial => 'option_value_fields', :locals => { :f => option_value_form } %>\n          <% end %>\n        <% end %>\n      </tbody>\n    </table>\n\n    <%= render :partial => 'spree/admin/shared/edit_resource_links' %>\n  </fieldset>\n<% end %>\n","markers":{"markers":{"1":{"id":1,"range":[[26,12],[26,38]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":31,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/edit.html.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6166fd4ed1ab115442e1776fcc00a4deb5b0da61","deserializer":"TextBuffer"},{"text":"<div data-hook=\"admin_option_type_form_fields\" class=\"align-center row\">\n  <div class=\"alpha eight columns\">\n    <%= f.field_container :name do %>\n      <%= f.label :name, Spree.t(:name) %> <span class=\"required\">*</span><br />\n      <%= f.text_field :name, :class => \"fullwidth\" %>\n      <%= f.error_message_on :name %>\n    <% end %>\n  </div>\n\n  <div class=\"omega eight columns\">\n    <%= f.field_container :presentation do %>\n      <%= f.label :presentation, Spree.t(:presentation) %> <span class=\"required\">*</span><br />\n      <%= f.text_field :presentation, :class => \"fullwidth\" %>\n      <%= f.error_message_on :presentation %>\n    <% end %>\n  </div>\n</div>","markers":{"markers":{"1":{"id":1,"range":[[1,2],[1,35]],"tailed":true,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":33,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/_form.html.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"06c98b374060c9ba070c9307a0d4fd0827ee252f","deserializer":"TextBuffer"},{"text":"module Spree\n  module Admin\n    module BaseHelper\n      def field_container(model, method, options = {}, &block)\n        css_classes = options[:class].to_a\n        css_classes << 'field'\n        if error_message_on(model, method).present?\n          css_classes << 'withError'\n        end\n        content_tag(:div, capture(&block), :class => css_classes.join(' '), :id => \"#{model}_#{method}_field\")\n      end\n\n      def error_message_on(object, method, options = {})\n        object = convert_to_model(object)\n        obj = object.respond_to?(:errors) ? object : instance_variable_get(\"@#{object}\")\n\n        if obj && obj.errors[method].present?\n          errors = obj.errors[method].map { |err| h(err) }.join('<br />').html_safe\n          content_tag(:span, errors, :class => 'formError')\n        else\n          ''\n        end\n      end\n\n      def datepicker_field_value(date)\n        unless date.blank?\n          l(date, :format => Spree.t('date_picker.format', default: '%Y/%m/%d'))\n        else\n          nil\n        end\n      end\n\n      # This method demonstrates the use of the :child_index option to render a\n      # form partial for, for instance, client side addition of new nested\n      # records.\n      #\n      # This specific example creates a link which uses javascript to add a new\n      # form partial to the DOM.\n      #\n      #   <%= form_for @project do |project_form| %>\n      #     <div id=\"tasks\">\n      #       <%= project_form.fields_for :tasks do |task_form| %>\n      #         <%= render :partial => 'task', :locals => { :f => task_form } %>\n      #       <% end %>\n      #     </div>\n      #   <% end %>\n      def generate_html(form_builder, method, options = {})\n        options[:object] ||= form_builder.object.class.reflect_on_association(method).klass.new\n        options[:partial] ||= method.to_s.singularize\n        options[:form_builder_local] ||= :f\n\n        form_builder.fields_for(method, options[:object], :child_index => 'NEW_RECORD') do |f|\n          render(:partial => options[:partial], :locals => { options[:form_builder_local] => f })\n        end\n\n      end\n\n      def generate_template(form_builder, method, options = {})\n        escape_javascript generate_html(form_builder, method, options)\n      end\n\n      def remove_nested(fields)\n        out = ''\n        out << fields.hidden_field(:_destroy) unless fields.object.new_record?\n        out << (link_to icon('icon-remove'), \"#\", :class => 'remove')\n        out.html_safe\n      end\n\n      def preference_field_tag(name, value, options)\n        case options[:type]\n        when :integer\n          text_field_tag(name, value, preference_field_options(options))\n        when :boolean\n          hidden_field_tag(name, 0, id: \"#{name}_hidden\") +\n          check_box_tag(name, 1, value, preference_field_options(options))\n        when :string\n          text_field_tag(name, value, preference_field_options(options))\n        when :password\n          password_field_tag(name, value, preference_field_options(options))\n        when :text\n          text_area_tag(name, value, preference_field_options(options))\n        else\n          text_field_tag(name, value, preference_field_options(options))\n        end\n      end\n\n      def preference_field_for(form, field, options)\n        case options[:type]\n        when :integer\n          form.text_field(field, preference_field_options(options))\n        when :boolean\n          form.check_box(field, preference_field_options(options))\n        when :string\n          form.text_field(field, preference_field_options(options))\n        when :password\n          form.password_field(field, preference_field_options(options))\n        when :text\n          form.text_area(field, preference_field_options(options))\n        else\n          form.text_field(field, preference_field_options(options))\n        end\n      end\n\n      def preference_field_options(options)\n        field_options = case options[:type]\n        when :integer\n          { :size => 10,\n            :class => 'input_integer' }\n        when :boolean\n          {}\n        when :string\n          { :size => 10,\n            :class => 'input_string fullwidth' }\n        when :password\n          { :size => 10,\n            :class => 'password_string fullwidth' }\n        when :text\n          { :rows => 15,\n            :cols => 85,\n            :class => 'fullwidth' }\n        else\n          { :size => 10,\n            :class => 'input_string fullwidth' }\n        end\n\n        field_options.merge!({\n          :readonly => options[:readonly],\n          :disabled => options[:disabled],\n          :size     => options[:size]\n        })\n      end\n\n      def preference_fields(object, form)\n        return unless object.respond_to?(:preferences)\n        object.preferences.keys.map{ |key|\n\n          form.label(\"preferred_#{key}\", Spree.t(key) + \": \") +\n            preference_field_for(form, \"preferred_#{key}\", :type => object.preference_type(key))\n\n        }.join(\"<br />\").html_safe\n      end\n\n      def link_to_add_fields(name, target, options = {})\n        name = '' if options[:no_text]\n        css_classes = options[:class] ? options[:class] + \" spree_add_fields\" : \"spree_add_fields\"\n        link_to_with_icon('icon-plus', name, 'javascript:', :data => { :target => target }, :class => css_classes)\n      end\n\n      # renders hidden field and link to remove record using nested_attributes\n      def link_to_remove_fields(name, f, options = {})\n        name = '' if options[:no_text]\n        options[:class] = '' unless options[:class]\n        options[:class] += 'no-text with-tip' if options[:no_text]\n        url = f.object.persisted? ? [:admin, f.object] : '#'\n        link_to_with_icon('icon-trash', name, url, :class => \"spree_remove_fields #{options[:class]}\", :data => {:action => 'remove'}, :title => Spree.t(:remove)) + f.hidden_field(:_destroy)\n      end\n\n      def spree_dom_id(record)\n        dom_id(record, 'spree')\n      end\n\n      private\n        def attribute_name_for(field_name)\n          field_name.gsub(' ', '_').downcase\n        end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":45},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/helpers/spree/admin/base_helper.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"4001f8e63e899e1e5627170a61c448431d2befab","deserializer":"TextBuffer"},{"text":"<div class=\"form-buttons filter-actions actions\" data-hook=\"buttons\">\n  <%= button Spree.t('actions.update'), 'icon-refresh' %>\n  <span class=\"or\"><%= Spree.t(:or) %></span>\n  <%= button_link_to Spree.t('actions.cancel'), collection_url, :icon => 'icon-remove' %>\n</div>\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[5,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":49,"autoscroll":false},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/shared/_edit_resource_links.html.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2272ff4492934852d2c7f6c5bc7ed3ca6a7f5378","deserializer":"TextBuffer"},{"text":"module Spree\n  module Admin\n    class BaseController < Spree::BaseController\n      ssl_required\n\n      helper 'spree/admin/navigation'\n      helper 'spree/admin/tables'\n      layout '/spree/layouts/admin'\n\n      before_filter :check_alerts\n      before_filter :authorize_admin\n\n      protected\n        def action\n          params[:action].to_sym\n        end\n\n        def authorize_admin\n          if respond_to?(:model_class, true) && model_class\n            record = model_class\n          else\n            record = controller_name.to_sym\n          end\n          authorize! :admin, record\n          authorize! action, record\n        end\n\n        # Need to generate an API key for a user due to some backend actions\n        # requiring authentication to the Spree API\n        def generate_admin_api_key\n          if (user = try_spree_current_user) && user.spree_api_key.blank?\n            user.generate_spree_api_key!\n          end\n        end\n\n        def check_alerts\n          return unless should_check_alerts?\n          unless session.has_key? :alerts\n            session[:alerts] = Spree::Alert.current(request.host)\n            filter_dismissed_alerts\n            Spree::Config.set :last_check_for_spree_alerts => DateTime.now.to_s\n          end\n        end\n\n        def should_check_alerts?\n          return false if !Rails.env.production? || !Spree::Config[:check_for_spree_alerts]\n\n          last_check = Spree::Config[:last_check_for_spree_alerts]\n          return true if last_check.blank?\n\n          DateTime.parse(last_check) < 12.hours.ago\n        end\n\n        def flash_message_for(object, event_sym)\n          resource_desc  = object.class.model_name.human\n          resource_desc += \" \\\"#{object.name}\\\"\" if object.respond_to?(:name) && object.name.present?\n          Spree.t(event_sym, :resource => resource_desc)\n        end\n\n        def render_js_for_destroy\n          render :partial => '/spree/admin/shared/destroy'\n        end\n\n        # Index request for JSON needs to pass a CSRF token in order to prevent JSON Hijacking\n        def check_json_authenticity\n          return unless request.format.js? or request.format.json?\n          return unless protect_against_forgery?\n          auth_token = params[request_forgery_protection_token]\n          unless (auth_token and form_authenticity_token == URI.unescape(auth_token))\n            raise(ActionController::InvalidAuthenticityToken)\n          end\n        end\n\n        def filter_dismissed_alerts\n          return unless session[:alerts]\n          dismissed = (Spree::Config[:dismissed_spree_alerts] || '').split(',')\n          # If it's a string, something has gone wrong with the alerts service. Ignore it.\n          if session[:alerts].is_a?(String)\n            session[:alerts] = nil\n          else\n            session[:alerts].reject! { |a| dismissed.include? a[\"id\"].to_s }\n          end\n        end\n\n        def config_locale\n          Spree::Backend::Config[:locale]\n        end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[55,10],[55,10]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":51,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/base_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9854b03286e974d296f9ced94e72ea9bdcb80217","deserializer":"TextBuffer"},{"text":"module Spree\n  module Admin\n    class OptionTypesController < ResourceController\n      before_filter :setup_new_option_value, :only => [:edit]\n\n      def update_values_positions\n        params[:positions].each do |id, index|\n          OptionValue.where(:id => id).update_all(:position => index)\n        end\n\n        respond_to do |format|\n          format.html { redirect_to admin_product_variants_url(params[:product_id]) }\n          format.js  { render :text => 'Ok' }\n        end\n      end\n\n      protected\n\n        def location_after_save\n          if @option_type.created_at == @option_type.updated_at\n            edit_admin_option_type_url(@option_type)\n          else\n            admin_option_types_url\n          end\n        end\n\n\n      private\n        def load_product\n          @product = Product.find_by_param!(params[:product_id])\n        end\n\n        def setup_new_option_value\n          @option_type.option_values.build if @option_type.option_values.empty?\n        end\n\n        def set_available_option_types\n          @available_option_types = if @product.option_type_ids.any?\n            OptionType.where('id NOT IN (?)', @product.option_type_ids)\n          else\n            OptionType.all\n          end\n        end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[27,0],[30,11]],"tailed":true,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":53,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/option_types_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"93df1d1d7098778ac77c9306b5bb1d69cb91e7c5","deserializer":"TextBuffer"},{"text":"require 'spree/backend/action_callbacks'\n\nclass Spree::Admin::ResourceController < Spree::Admin::BaseController\n  helper_method :new_object_url, :edit_object_url, :object_url, :collection_url\n  before_filter :load_resource, :except => [:update_positions]\n  rescue_from ActiveRecord::RecordNotFound, :with => :resource_not_found\n\n  respond_to :html\n\n  def new\n    invoke_callbacks(:new_action, :before)\n    respond_with(@object) do |format|\n      format.html { render :layout => !request.xhr? }\n      if request.xhr?\n        format.js   { render :layout => false }\n      end\n    end\n  end\n\n  def edit\n    respond_with(@object) do |format|\n      format.html { render :layout => !request.xhr? }\n      if request.xhr?\n        format.js   { render :layout => false }\n      end\n    end\n  end\n\n  def update\n    invoke_callbacks(:update, :before)\n    if @object.update_attributes(permitted_resource_params)\n      invoke_callbacks(:update, :after)\n      flash[:success] = flash_message_for(@object, :successfully_updated)\n      respond_with(@object) do |format|\n        format.html { redirect_to location_after_save }\n        format.js   { render :layout => false }\n      end\n    else\n      invoke_callbacks(:update, :fails)\n      respond_with(@object)\n    end\n  end\n\n  def create\n    invoke_callbacks(:create, :before)\n    @object.attributes = permitted_resource_params\n    if @object.save\n      invoke_callbacks(:create, :after)\n      flash[:success] = flash_message_for(@object, :successfully_created)\n      respond_with(@object) do |format|\n        format.html { redirect_to location_after_save }\n        format.js   { render :layout => false }\n      end\n    else\n      invoke_callbacks(:create, :fails)\n      respond_with(@object)\n    end\n  end\n\n  def update_positions\n    params[:positions].each do |id, index|\n      model_class.where(:id => id).update_all(:position => index)\n    end\n\n    respond_to do |format|\n      format.js  { render :text => 'Ok' }\n    end\n  end\n\n  def destroy\n    invoke_callbacks(:destroy, :before)\n    if @object.destroy\n      invoke_callbacks(:destroy, :after)\n      flash[:success] = flash_message_for(@object, :successfully_removed)\n      respond_with(@object) do |format|\n        format.html { redirect_to location_after_destroy }\n        format.js   { render :partial => \"spree/admin/shared/destroy\" }\n      end\n    else\n      invoke_callbacks(:destroy, :fails)\n      respond_with(@object) do |format|\n        format.html { redirect_to location_after_destroy }\n      end\n    end\n  end\n\n  protected\n\n    def resource_not_found\n      flash[:error] = flash_message_for(model_class.new, :not_found)\n      redirect_to collection_url\n    end\n\n    class << self\n      attr_accessor :parent_data\n      attr_accessor :callbacks\n\n      def belongs_to(model_name, options = {})\n        @parent_data ||= {}\n        @parent_data[:model_name] = model_name\n        @parent_data[:model_class] = model_name.to_s.classify.constantize\n        @parent_data[:find_by] = options[:find_by] || :id\n      end\n\n      def new_action\n        @callbacks ||= {}\n        @callbacks[:new_action] ||= Spree::ActionCallbacks.new\n      end\n\n      def create\n        @callbacks ||= {}\n        @callbacks[:create] ||= Spree::ActionCallbacks.new\n      end\n\n      def update\n        @callbacks ||= {}\n        @callbacks[:update] ||= Spree::ActionCallbacks.new\n      end\n\n      def destroy\n        @callbacks ||= {}\n        @callbacks[:destroy] ||= Spree::ActionCallbacks.new\n      end\n    end\n\n    def model_class\n      \"Spree::#{controller_name.classify}\".constantize\n    end\n\n    def model_name\n      parent_data[:model_name].gsub('spree/', '')\n    end\n\n    def object_name\n      controller_name.singularize\n    end\n\n    def load_resource\n      if member_action?\n        @object ||= load_resource_instance\n\n        # call authorize! a third time (called twice already in Admin::BaseController)\n        # this time we pass the actual instance so fine-grained abilities can control\n        # access to individual records, not just entire models.\n        authorize! action, @object\n\n        instance_variable_set(\"@#{object_name}\", @object)\n      else\n        @collection ||= collection\n\n        # note: we don't call authorize here as the collection method should use\n        # CanCan's accessible_by method to restrict the actual records returned\n\n        instance_variable_set(\"@#{controller_name}\", @collection)\n      end\n    end\n\n    def load_resource_instance\n      if new_actions.include?(action)\n        build_resource\n      elsif params[:id]\n        find_resource\n      end\n    end\n\n    def parent_data\n      self.class.parent_data\n    end\n\n    def parent\n      if parent_data.present?\n        @parent ||= parent_data[:model_class].send(\"find_by_#{parent_data[:find_by]}\", params[\"#{model_name}_id\"])\n        instance_variable_set(\"@#{model_name}\", @parent)\n      else\n        nil\n      end\n    end\n\n    def find_resource\n      if parent_data.present?\n        parent.send(controller_name).find(params[:id])\n      else\n        model_class.find(params[:id])\n      end\n    end\n\n    def build_resource\n      if parent_data.present?\n        parent.send(controller_name).build\n      else\n        model_class.new\n      end\n    end\n\n    def collection\n      return parent.send(controller_name) if parent_data.present?\n      if model_class.respond_to?(:accessible_by) && !current_ability.has_block?(params[:action], model_class)\n        model_class.accessible_by(current_ability, action)\n      else\n        model_class.scoped\n      end\n    end\n\n    def location_after_destroy\n      collection_url\n    end\n\n    def location_after_save\n      collection_url\n    end\n\n    def invoke_callbacks(action, callback_type)\n      callbacks = self.class.callbacks || {}\n      return if callbacks[action].nil?\n      case callback_type.to_sym\n        when :before then callbacks[action].before_methods.each {|method| send method }\n        when :after  then callbacks[action].after_methods.each  {|method| send method }\n        when :fails  then callbacks[action].fails_methods.each  {|method| send method }\n      end\n    end\n\n    # URL helpers\n\n    def new_object_url(options = {})\n      if parent_data.present?\n        spree.new_polymorphic_url([:admin, parent, model_class], options)\n      else\n        spree.new_polymorphic_url([:admin, model_class], options)\n      end\n    end\n\n    def edit_object_url(object, options = {})\n      if parent_data.present?\n        spree.send \"edit_admin_#{model_name}_#{object_name}_url\", parent, object, options\n      else\n        spree.send \"edit_admin_#{object_name}_url\", object, options\n      end\n    end\n\n    def object_url(object = nil, options = {})\n      target = object ? object : @object\n      if parent_data.present?\n        spree.send \"admin_#{model_name}_#{object_name}_url\", parent, target, options\n      else\n        spree.send \"admin_#{object_name}_url\", target, options\n      end\n    end\n\n    def collection_url(options = {})\n      if parent_data.present?\n        spree.polymorphic_url([:admin, parent, model_class], options)\n      else\n        spree.polymorphic_url([:admin, model_class], options)\n      end\n    end\n\n    # Allow all attributes to be updatable.\n    #\n    # Other controllers can, should, override it to set custom logic\n    def permitted_resource_params\n      params.require(object_name).permit!\n    end\n\n    def collection_actions\n      [:index]\n    end\n\n    def member_action?\n      !collection_actions.include? action\n    end\n\n    def new_actions\n      [:new, :create]\n    end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":55},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/resource_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3feab13e960e69bc06b66b0bfa1f3f1cb4f4ebcc","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":29,"softTabs":true,"scrollTop":17,"scrollLeft":71,"displayBuffer":{"id":30,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/index.html.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":45,"softTabs":true,"scrollTop":1899,"scrollLeft":0,"displayBuffer":{"id":46,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/helpers/spree/admin/base_helper.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":49,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":50,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/shared/_edit_resource_links.html.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":51,"softTabs":true,"scrollTop":408,"scrollLeft":0,"displayBuffer":{"id":52,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/base_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":53,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":54,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/option_types_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":55,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":56,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/resource_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":31,"softTabs":true,"scrollTop":17,"scrollLeft":0,"displayBuffer":{"id":32,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/edit.html.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":33,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":34,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/_form.html.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/resource_controller.rb","focused":false,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"tree-view:show-in-file-manager":{"count":1,"name":"tree-view:show-in-file-manager","lastRun":1395507327809},"symbols-view:toggle-file-symbols":{"count":5,"name":"symbols-view:toggle-file-symbols","lastRun":1395507373680},"tree-view:toggle-side":{"count":2,"name":"tree-view:toggle-side","lastRun":1395507386608},"tree-view:reveal-active-file":{"count":1,"name":"tree-view:reveal-active-file","lastRun":1395507411047},"project-find:show-in-current-directory":{"count":2,"name":"project-find:show-in-current-directory","lastRun":1395507416689}}},"fuzzy-finder":{"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/index.html.erb":1395509506622,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/edit.html.erb":1395507625888,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/option_types/_form.html.erb":1395508011273,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/helpers/spree/admin/base_helper.rb":1395510510756,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/views/spree/admin/shared/_edit_resource_links.html.erb":1395510512875,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/base_controller.rb":1395515525149,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/option_types_controller.rb":1395515672945,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app/controllers/spree/admin/resource_controller.rb":1395517257261},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":9955426},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.4/app","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200},"find-and-replace":{"viewState":{"findHistory":[],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["link_to_edit"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}}}}