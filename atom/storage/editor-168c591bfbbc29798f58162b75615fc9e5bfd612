{"mode":"editor","version":"0.75.0","windowDimensions":{"x":208,"y":22,"width":1024,"height":874},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6","buffers":[{"text":"<% content_for :page_title do %>\n  <%= Spree.t(:listing_products) %>\n<% end %>\n\n<% content_for :page_actions do %>\n  <li id=\"new_product_link\">\n    <%= button_link_to Spree.t(:new_product), new_object_url, { :remote => true, :icon => 'icon-plus', :id => 'admin_new_product' } %>\n  </li>\n<% end if can?(:create, Spree::Product) %>\n\n<%= render :partial => 'spree/admin/shared/product_sub_menu' %>\n\n<% content_for :table_filter_title do %>\n  <%= Spree.t(:search) %>\n<% end %>\n\n<% content_for :table_filter do %>\n  <div data-hook=\"admin_products_sidebar\">\n\n    <%= search_form_for [:admin, @search] do |f| %>\n\n        <%- locals = {:f => f} %>\n\n        <div data-hook=\"admin_products_index_search\">\n          <div class=\"alpha nine columns\">\n            <div class=\"field\">\n              <%= f.label :name_cont, Spree.t(:name) %>\n              <%= f.text_field :name_cont, :size => 15 %>\n            </div>\n          </div>\n          <div class=\"four columns\">\n            <div class=\"field\">\n              <%= f.label :variants_including_master_sku_cont, Spree.t(:sku) %>\n              <%= f.text_field :variants_including_master_sku_cont, :size => 15 %>\n            </div>\n          </div>\n          <div class=\"three columns omega\">\n            <div class=\"field checkbox\">\n              <label>\n                <%= f.check_box :deleted_at_null, {:checked => params[:q][:deleted_at_null].blank?}, '', '1' %>\n                <%= Spree.t(:show_deleted) %>\n              </label>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"clear\"></div>\n\n        <div class=\"form-buttons actions filter-actions\" data-hook=\"admin_products_index_search_buttons\">\n          <%= button Spree.t(:search), 'icon-search' %>\n        </div>\n    <% end %>\n  </div>\n<% end %>\n\n<div id=\"new_product_wrapper\" data-hook></div>\n\n<%= paginate @collection %>\n\n<% if @collection.any? %>\n  <table class=\"index\" id=\"listing_products\">\n    <colgroup>\n       <col style=\"width: 15%;\">\n       <col style=\"width: 10%;\">\n       <col style=\"width: 48%;\">\n       <col style=\"width: 10%;\">\n       <col style=\"width: 17%;\">\n    </colgroup>\n    <thead>\n      <tr data-hook=\"admin_products_index_headers\">\n        <th><%= Spree.t(:sku) %></th>\n        <th colspan=\"2\"><%= sort_link @search,:name, Spree.t(:name), { :default_order => \"desc\" }, {:title => 'admin_products_listing_name_title'} %></th>\n        <th><%= sort_link @search,:master_default_price_amount, Spree.t(:master_price), {}, {:title => 'admin_products_listing_price_title'} %></th>\n        <th data-hook=\"admin_products_index_header_actions\" class=\"actions\"></th>\n      </tr>\n    </thead>\n    <tbody>\n      <% @collection.each do |product| %>\n          <tr <%== \"style='color: red;'\" if product.deleted? %> id=\"<%= spree_dom_id product %>\" data-hook=\"admin_products_index_rows\" class=\"<%= cycle('odd', 'even') %>\">\n            <td class=\"align-center\"><%= product.sku rescue '' %></td>\n            <td class=\"align-center\"><%= mini_image(product) %></td>\n            <td><%= link_to product.try(:name), edit_admin_product_path(product) %></td>\n            <td class=\"align-center\"><%= product.display_price.to_html rescue '' %></td>\n            <td class=\"actions\" data-hook=\"admin_products_index_row_actions\">\n              <%= link_to_edit product, :no_text => true, :class => 'edit' if can?(:edit, product) && !product.deleted? %>\n              &nbsp;\n              <%= link_to_clone product, :no_text => true, :class => 'clone' if can?(:clone, product) %>\n              &nbsp;\n              <%= link_to_delete product, :no_text => true if can?(:delete, product) && !product.deleted? %>\n            </td>\n          </tr>\n      <% end %>\n    </tbody>\n  </table>\n<% else %>\n  <div class=\"alpha twelve columns no-objects-found\">\n    <%= Spree.t(:no_resource_found, resource: I18n.t(:other, scope: 'activerecord.models.spree/product')) %>,\n    <%= link_to Spree.t(:add_one), spree.new_admin_product_path %>!\n  </div>\n<% end %>\n\n<%= paginate @collection %>\n","markers":{"markers":{"1":{"id":1,"range":[[86,14],[86,104]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":21,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/products/index.html.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"de7b87297e8ef28cd0f346e7cada0af692d4621a","deserializer":"TextBuffer"},{"text":"module Spree\n  module Admin\n    module NavigationHelper\n      # Make an admin tab that coveres one or more resources supplied by symbols\n      # Option hash may follow. Valid options are\n      #   * :label to override link text, otherwise based on the first resource name (translated)\n      #   * :route to override automatically determining the default route\n      #   * :match_path as an alternative way to control when the tab is active, /products would match /admin/products, /admin/products/5/variants etc.\n      def tab(*args)\n        options = {:label => args.first.to_s}\n\n        # Return if resource is found and user is not allowed to :admin\n        return '' if klass = klass_for(options[:label]) and cannot?(:admin, klass)\n\n        if args.last.is_a?(Hash)\n          options = options.merge(args.pop)\n        end\n        options[:route] ||=  \"admin_#{args.first}\"\n\n        destination_url = options[:url] || spree.send(\"#{options[:route]}_path\")\n        titleized_label = Spree.t(options[:label], :default => options[:label], :scope => [:admin, :tab]).titleize\n\n        css_classes = []\n\n        if options[:icon]\n          link = link_to_with_icon(options[:icon], titleized_label, destination_url)\n          css_classes << 'tab-with-icon'\n        else\n          link = link_to(titleized_label, destination_url)\n        end\n\n        selected = if options[:match_path].is_a? Regexp\n          request.fullpath =~ options[:match_path]\n        elsif options[:match_path]\n          request.fullpath.starts_with?(\"#{admin_path}#{options[:match_path]}\")\n        else\n          args.include?(controller.controller_name.to_sym)\n        end\n        css_classes << 'selected' if selected\n\n        if options[:css_class]\n          css_classes << options[:css_class]\n        end\n        content_tag('li', link, :class => css_classes.join(' '))\n      end\n\n      # finds class for a given symbol / string\n      #\n      # Example :\n      # :products returns Spree::Product\n      # :my_products returns MyProduct if MyProduct is defined\n      # :my_products returns My::Product if My::Product is defined\n      # if cannot constantize it returns nil\n      # This will allow us to use cancan abilities on tab\n      def klass_for(name)\n        model_name = name.to_s\n\n        [\"Spree::#{model_name.classify}\", model_name.classify, model_name.gsub('_', '/').classify].find do |t|\n          t.safe_constantize\n        end.try(:safe_constantize)\n      end\n\n      def link_to_clone(resource, options={})\n        options[:data] = {:action => 'clone'}\n        link_to_with_icon('icon-copy', Spree.t(:clone), clone_object_url(resource), options)\n      end\n\n      def link_to_new(resource)\n        options[:data] = {:action => 'new'}\n        link_to_with_icon('icon-plus', Spree.t(:new), edit_object_url(resource))\n      end\n\n      def link_to_edit(resource, options={})\n        url = options[:url] || edit_object_url(resource)\n        options[:data] = {:action => 'edit'}\n        link_to_with_icon('icon-edit', Spree.t(:edit), url, options)\n      end\n\n      def link_to_edit_url(url, options={})\n        options[:data] = {:action => 'edit'}\n        link_to_with_icon('icon-edit', Spree.t(:edit), url, options)\n      end\n\n      def link_to_delete(resource, options={})\n        url = options[:url] || object_url(resource)\n        name = options[:name] || Spree.t(:delete)\n        options[:class] = \"delete-resource\"\n        options[:data] = { :confirm => Spree.t(:are_you_sure), :action => 'remove' }\n        link_to_with_icon 'icon-trash', name, url, options\n      end\n\n      def link_to_with_icon(icon_name, text, url, options = {})\n        options[:class] = (options[:class].to_s + \" icon_link with-tip #{icon_name}\").strip\n        options[:class] += ' no-text' if options[:no_text]\n        options[:title] = text if options[:no_text]\n        text = options[:no_text] ? '' : raw(\"<span class='text'>#{text}</span>\")\n        options.delete(:no_text)\n        link_to(text, url, options)\n      end\n\n      def icon(icon_name)\n        icon_name ? content_tag(:i, '', :class => icon_name) : ''\n      end\n\n      def button(text, icon_name = nil, button_type = 'submit', options={})\n        button_tag(text, options.merge(:type => button_type, :class => \"#{icon_name} button\"))\n      end\n\n      def button_link_to(text, url, html_options = {})\n        if (html_options[:method] &&\n            html_options[:method].to_s.downcase != 'get' &&\n            !html_options[:remote])\n          form_tag(url, :method => html_options.delete(:method)) do\n            button(text, html_options.delete(:icon), nil, html_options)\n          end\n        else\n          if html_options['data-update'].nil? && html_options[:remote]\n            object_name, action = url.split('/')[-2..-1]\n            html_options['data-update'] = [action, object_name.singularize].join('_')\n          end\n\n          html_options.delete('data-update') unless html_options['data-update']\n\n          html_options[:class] = 'button'\n\n          if html_options[:icon]\n            html_options[:class] += \" #{html_options[:icon]}\"\n          end\n          link_to(text_for_button_link(text, html_options), url, html_options)\n        end\n      end\n\n      def text_for_button_link(text, html_options)\n        s = ''\n        s << text\n        raw(s)\n      end\n\n      def configurations_menu_item(link_text, url, description = '')\n        %(<tr>\n          <td>#{link_to(link_text, url)}</td>\n          <td>#{description}</td>\n        </tr>\n        ).html_safe\n      end\n\n      def configurations_sidebar_menu_item(link_text, url, options = {})\n        is_active = url.ends_with?(controller.controller_name) || \n                    url.ends_with?(\"#{controller.controller_name}/edit\") ||\n                    url.ends_with?(\"#{controller.controller_name.singularize}/edit\")\n        options.merge!(:class => is_active ? 'active' : nil)\n        content_tag(:li, options) do\n          link_to(link_text, url)\n        end\n      end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[64,8],[64,92]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":23,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/helpers/spree/admin/navigation_helper.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"1056657be1b8cf2c115651e7271db4a96dfe487c","deserializer":"TextBuffer"},{"text":"$(\"#new_state\").html(\"<%= escape_javascript(render :template => 'spree/admin/states/new', :formats => [:html], :handlers => [:erb]) %>\");\n$(\"#new_state_link\").parent().hide();\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[0,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":31},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/states/new.js.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"cd8d105e9d392f7909da8557522ec1f39a7aab27","deserializer":"TextBuffer"},{"text":"module Spree\n  module Admin\n    class ProductsController < ResourceController\n      helper 'spree/products'\n\n      before_filter :load_data, :except => :index\n      create.before :create_before\n      update.before :update_before\n      helper_method :clone_object_url\n\n      def show\n        session[:return_to] ||= request.referer\n        redirect_to( :action => :edit )\n      end\n\n      def index\n        session[:return_to] = request.url\n        respond_with(@collection)\n      end\n\n      def update\n        if params[:product][:taxon_ids].present?\n          params[:product][:taxon_ids] = params[:product][:taxon_ids].split(',')\n        end\n        if params[:product][:option_type_ids].present?\n          params[:product][:option_type_ids] = params[:product][:option_type_ids].split(',')\n        end\n        super\n      end\n\n      def destroy\n        @product = Product.find_by_permalink!(params[:id])\n        @product.destroy\n\n        flash[:success] = Spree.t('notice_messages.product_deleted')\n\n        respond_with(@product) do |format|\n          format.html { redirect_to collection_url }\n          format.js  { render_js_for_destroy }\n        end\n      end\n\n      def clone\n        @new = @product.duplicate\n\n        if @new.save\n          flash[:success] = Spree.t('notice_messages.product_cloned')\n        else\n          flash[:success] = Spree.t('notice_messages.product_not_cloned')\n        end\n\n        redirect_to edit_admin_product_url(@new)\n      end\n\n      def stock\n        @variants = @product.variants\n        @variants = [@product.master] if @variants.empty?\n        @stock_locations = StockLocation.accessible_by(current_ability, :read)\n        if @stock_locations.empty?\n          flash[:error] = Spree.t(:stock_management_requires_a_stock_location)\n          redirect_to admin_stock_locations_path\n        end\n      end\n\n      protected\n\n        def find_resource\n          Product.with_deleted.find_by_permalink!(params[:id])\n        end\n\n        def location_after_save\n          spree.edit_admin_product_url(@product)\n        end\n\n        def load_data\n          @taxons = Taxon.order(:name)\n          @option_types = OptionType.order(:name)\n          @tax_categories = TaxCategory.order(:name)\n          @shipping_categories = ShippingCategory.order(:name)\n        end\n\n        def collection\n          return @collection if @collection.present?\n          params[:q] ||= {}\n          params[:q][:deleted_at_null] ||= \"1\"\n\n          params[:q][:s] ||= \"name asc\"\n          @collection = super\n          @collection = @collection.with_deleted if params[:q].delete(:deleted_at_null).blank?\n          # @search needs to be defined as this is passed to search_form_for\n          @search = @collection.ransack(params[:q])\n          @collection = @search.result.\n                distinct_by_product_ids(params[:q][:s]).\n                includes(product_includes).\n                page(params[:page]).\n                per(Spree::Config[:admin_products_per_page])\n\n          @collection\n        end\n\n        def create_before\n          return if params[:product][:prototype_id].blank?\n          @prototype = Spree::Prototype.find(params[:product][:prototype_id])\n        end\n\n        def update_before\n          # note: we only reset the product properties if we're receiving a post from the form on that tab\n          return unless params[:clear_product_properties]\n          params[:product] ||= {}\n        end\n\n        def product_includes\n          [{ :variants => [:images, { :option_values => :option_type }], :master => [:images, :default_price]}]\n        end\n        \n        def clone_object_url resource\n          clone_admin_product_url resource\n        end\n\n        def permit_attributes\n          params.require(:product).permit!\n        end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[38,23],[38,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":37,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/controllers/spree/admin/products_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"cc73a1908efed0389619a39ace06a09abd68d2f9","deserializer":"TextBuffer"},{"text":"module Spree\n  module Admin\n    class BaseController < Spree::BaseController\n      ssl_required\n\n      helper 'spree/admin/navigation'\n      helper 'spree/admin/tables'\n      layout '/spree/layouts/admin'\n\n      before_filter :check_alerts\n      before_filter :authorize_admin\n\n      protected\n        def action\n          params[:action].to_sym\n        end\n\n        def authorize_admin\n          if respond_to?(:model_class, true) && model_class\n            record = model_class\n          else\n            record = controller_name.to_sym\n          end\n          authorize! :admin, record\n          authorize! action, record\n        end\n\n        # Need to generate an API key for a user due to some backend actions\n        # requiring authentication to the Spree API\n        def generate_admin_api_key\n          if (user = try_spree_current_user) && user.spree_api_key.blank?\n            user.generate_spree_api_key!\n          end\n        end\n\n        def check_alerts\n          return unless should_check_alerts?\n          unless session.has_key? :alerts\n            session[:alerts] = Spree::Alert.current(request.host)\n            filter_dismissed_alerts\n            Spree::Config.set :last_check_for_spree_alerts => DateTime.now.to_s\n          end\n        end\n\n        def should_check_alerts?\n          return false if !Rails.env.production? || !Spree::Config[:check_for_spree_alerts]\n\n          last_check = Spree::Config[:last_check_for_spree_alerts]\n          return true if last_check.blank?\n\n          DateTime.parse(last_check) < 12.hours.ago\n        end\n\n        def flash_message_for(object, event_sym)\n          resource_desc  = object.class.model_name.human\n          resource_desc += \" \\\"#{object.name}\\\"\" if object.respond_to?(:name) && object.name.present?\n          Spree.t(event_sym, :resource => resource_desc)\n        end\n\n        def render_js_for_destroy\n          render :partial => '/spree/admin/shared/destroy'\n        end\n\n        # Index request for JSON needs to pass a CSRF token in order to prevent JSON Hijacking\n        def check_json_authenticity\n          return unless request.format.js? or request.format.json?\n          return unless protect_against_forgery?\n          auth_token = params[request_forgery_protection_token]\n          unless (auth_token and form_authenticity_token == URI.unescape(auth_token))\n            raise(ActionController::InvalidAuthenticityToken)\n          end\n        end\n\n        def filter_dismissed_alerts\n          return unless session[:alerts]\n          dismissed = (Spree::Config[:dismissed_spree_alerts] || '').split(',')\n          # If it's a string, something has gone wrong with the alerts service. Ignore it.\n          if session[:alerts].is_a?(String)\n            session[:alerts] = nil\n          else\n            session[:alerts].reject! { |a| dismissed.include? a[\"id\"].to_s }\n          end\n        end\n\n        def config_locale\n          Spree::Backend::Config[:locale]\n        end\n    end\n  end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[59,12],[59,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":39,"autoscroll":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/controllers/spree/admin/base_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"9854b03286e974d296f9ced94e72ea9bdcb80217","deserializer":"TextBuffer"},{"text":"<% success = flash.discard(:success)\nif success %>\n  console.log(show_flash)\n  show_flash('success', \"<%= success %>\")\n<% end %>\n\n<%= render :partial => '/spree/admin/shared/update_order_state' if @order %>\n","markers":{"markers":{"1":{"id":1,"range":[[0,0],[4,9]],"tailed":true,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":41,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/shared/_destroy.js.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"18205e05d6eaa934409f1f47d89cc2f480e053d1","deserializer":"TextBuffer"},{"text":"<% content_for :page_title do %>\n  <%= link_to \"#{Spree.t(:order)} ##{@order.number}\", spree.edit_admin_order_path(@order) %>\n<% end %>\n\n<% content_for :sidebar_title do %>\n  <%= Spree.t(:order_information) %>\n<% end %>\n\n<% content_for :sidebar do %>\n  <% checkout_steps = @order.checkout_steps %>\n  <header id=\"order_tab_summary\" data-hook>\n    <dl class=\"additional-info\">\n      <dt id=\"order_status\" data-hook><%= Spree.t(:status) %>:</dt>\n      <dd><span class=\"state <%= @order.state %>\"><%= Spree.t(@order.state, :scope => :order_state) %></span></dd>\n      <dt data-hook><%= Spree.t(:item_total) %>:</dt>\n      <dd id='item_total'><%= @order.display_item_total.to_html %></dd>\n      <% if checkout_steps.include?(\"delivery\") && @order.ship_total > 0 %>\n        <dt data-hook><%= Spree.t(:ship_total) %>:</dt>\n        <dd id='item_total'><%= @order.display_ship_total.to_html %></dd>\n      <% end %>\n\n      <% if @order.tax_total > 0 %>\n        <dt data-hook><%= Spree.t(:tax_total) %>:</dt>\n        <dd id='item_total'><%= @order.display_tax_total.to_html %></dd>\n      <% end %>\n\n      <dt data-hook><%= Spree.t(:total) %>:</dt>\n      <dd id='order_total'><%= @order.display_total.to_html %></dd>\n\n\n      <% if @order.completed? %>\n        <dt><%= Spree.t(:shipment) %>: </dt>\n        <dd id='shipment_status'><span class=\"state <%= @order.shipment_state %>\"><%= Spree.t(@order.shipment_state, :scope => :shipment_states, :default => [:missing, \"none\"]) %></span></dd>\n        <dt><%= Spree.t(:payment) %>: </dt>\n        <dd id='payment_status'><span class=\"state <%= @order.payment_state %>\"><%= Spree.t(@order.payment_state, :scope => :payment_states, :default => [:missing, \"none\"]) %></span></dd>\n        <dt data-hook><%= Spree.t(:date_completed) %>:</dt>\n        <dd id='date_complete'><%= pretty_time(@order.completed_at) %></dd>\n      <% end %>\n    </dl>\n  </header>\n\n  <nav class=\"menu\">\n    <ul data-hook=\"admin_order_tabs\">\n\n      <% if can? :update, @order %>\n        <li<%== ' class=\"active\"' if current == 'Order Details' %>>\n          <%= link_to_with_icon 'icon-edit', Spree.t(:order_details), edit_admin_order_url(@order) %>\n        </li>\n      <% end %>\n      <% if can? :update, @order && checkout_steps.include?(\"address\") %>\n        <li<%== ' class=\"active\"' if current == 'Customer Details' %>>\n          <%= link_to_with_icon 'icon-user', Spree.t(:customer_details), admin_order_customer_url(@order) %>\n        </li>\n      <% end %>\n      <% if can? :index, Spree::Adjustment %>\n        <li<%== ' class=\"active\"' if current == 'Adjustments' %>>\n          <%= link_to_with_icon 'icon-cogs', Spree.t(:adjustments), admin_order_adjustments_url(@order) %>\n        </li>\n      <% end %>\n      <% if can? :index, Spree::Payment && @payment_required %>\n        <li<%== ' class=\"active\"' if current == 'Payments' %>>\n          <%= link_to_with_icon 'icon-credit-card', Spree.t(:payments), admin_order_payments_url(@order) %>\n        </li>\n      <% end %>\n      <% if can? :index, Spree::ReturnAuthorization %>\n        <% if @order.completed? %>\n          <li<%== ' class=\"active\"' if current == 'Return Authorizations' %>>\n            <%= link_to_with_icon 'icon-share-alt', Spree.t(:return_authorizations), admin_order_return_authorizations_url(@order) %>\n          </li>\n        <% end %>\n      <% end %>\n    </ul>\n  </nav>\n\n<% end %>\n","markers":{"markers":{"1":{"id":1,"range":[[46,10],[46,101]],"tailed":true,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":43,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/shared/_order_tabs.html.erb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2fd2cabaf3e22511acf71aeb7cfc17bd00722cf6","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":21,"softTabs":true,"scrollTop":849,"scrollLeft":143,"displayBuffer":{"id":22,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/products/index.html.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":39,"softTabs":true,"scrollTop":623,"scrollLeft":0,"displayBuffer":{"id":40,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/controllers/spree/admin/base_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":41,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":42,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/shared/_destroy.js.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":37,"softTabs":true,"scrollTop":201,"scrollLeft":0,"displayBuffer":{"id":38,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/controllers/spree/admin/products_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":43,"softTabs":true,"scrollTop":559,"scrollLeft":111,"displayBuffer":{"id":44,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/shared/_order_tabs.html.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":23,"softTabs":true,"scrollTop":1004,"scrollLeft":47,"displayBuffer":{"id":24,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/helpers/spree/admin/navigation_helper.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":31,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":32,"softWrap":false,"editorWidthInChars":101,"tokenizedBuffer":{"bufferPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/states/new.js.erb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/shared/_order_tabs.html.erb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"project-find:show":{"count":2,"name":"project-find:show","lastRun":1396108282224}}},"find-and-replace":{"viewState":{"findHistory":["users"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}},"projectViewState":{"findHistory":["tax_rates","states","link_to_clone","format.js","render_js_for_destroy"],"replaceHistory":[],"pathsHistory":[],"modelState":{"useRegex":false,"caseSensitive":false}},"resultsModelState":{"useRegex":false,"caseSensitive":false}},"fuzzy-finder":{"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/products/index.html.erb":1396108649636,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/helpers/spree/admin/navigation_helper.rb":1396110897848,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/states/new.js.erb":1396110910836,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/controllers/spree/admin/products_controller.rb":1396111876415,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/controllers/spree/admin/base_controller.rb":1396111869356,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/shared/_destroy.js.erb":1396111787291,"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app/views/spree/admin/shared/_order_tabs.html.erb":1396113502899},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":16095919},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/opt/boxen/rbenv/versions/2.0.0-p353/lib/ruby/gems/2.0.0/gems/spree_backend-2.1.6/app","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}